        public static bool RealInsertion(Connexion connexion, int idBox, int idPerson, int mois, int annee,decimal montant, DateTime date)
        {
            try
            {
                // Formater la date pour la requête SQL (format Access : yyyy-MM-dd)
                string datePaiement = date.ToString("yyyy-MM-dd");
                decimal montantRestant = montant;
                int currentIdBox = idBox;

                while (montantRestant > 0)
                {
                    // Récupérer la dette la plus ancienne
                    var dettePlusAncienne = Person.GetPlusAncienDette(connexion, idPerson);
                    if (dettePlusAncienne == null)
                    {
                        Console.WriteLine("Aucune dette à payer");
                        break;
                    }

                    int idBoxAncien = Convert.ToInt32(dettePlusAncienne[0]);
                    decimal montantDette = Convert.ToDecimal(dettePlusAncienne[1]);
                    int moisApayer = Convert.ToInt32(dettePlusAncienne[2]);
                    int anneeApayer = Convert.ToInt32(dettePlusAncienne[3]);

                    Console.WriteLine($"Dette la plus ancienne : idBox={idBoxAncien}, mois={moisApayer}, année={anneeApayer}, montant_dette={montantDette}");

                    // Vérifier les autres dettes pour le même mois et année
                    string queryCheckOtherDebts = $@"
                        SELECT DETTE.idBox, DETTE.montant, BOX.numeroBox 
                        FROM DETTE, BOX 
                        WHERE DETTE.idBox = BOX.idBox 
                        AND DETTE.idPerson = {idPerson}
                        AND DETTE.mois = {moisApayer}
                        AND DETTE.annee = {anneeApayer}
                        AND DETTE.montant > 0 
                        ORDER BY BOX.numeroBox ASC";
                    var otherDebts = connexion.ExecuteQuery(queryCheckOtherDebts);

                    if (otherDebts != null && otherDebts.Count > 0)
                    {
                        // S'il y a plusieurs dettes, prendre celle avec le numeroBox le plus bas qui a encore un reste à payer
                        foreach (var debt in otherDebts)
                        {
                            int idBoxTemp = Convert.ToInt32(debt[0]);
                            decimal montantTemp = Convert.ToDecimal(debt[1]);
                            int numeroBox = Convert.ToInt32(debt[2]);
                            decimal resteIdBox = Paiement.GetResteApayer(connexion, idBoxTemp, idPerson, moisApayer, anneeApayer);

                            if (resteIdBox > 0)
                            {
                                currentIdBox = idBoxTemp;
                                Console.WriteLine($"Priorisation de idBox={currentIdBox} (Box n°{numeroBox}) pour mois={moisApayer}, année={anneeApayer}");
                                break;
                            }
                        }
                        if (currentIdBox == idBox) // Si aucune priorisation n'a été faite
                        {
                            currentIdBox = Convert.ToInt32(otherDebts[0][0]);
                            Console.WriteLine($"Choix par défaut de idBox={currentIdBox} pour mois={moisApayer}, année={anneeApayer}");
                        }
                    }
                    else
                    {
                        currentIdBox = idBoxAncien != 0 ? idBoxAncien : idBox;
                        Console.WriteLine($"Une seule dette ou aucune autre dette, utilisation de idBox={currentIdBox}");
                    }

                    Console.WriteLine($"Box courante sélectionnée : idBox={currentIdBox}");

                    // Calculer le reste à payer
                    decimal reste = Paiement.GetResteApayer(connexion, currentIdBox, idPerson, moisApayer, anneeApayer);
                    Console.WriteLine($"Reste à payer pour idBox={currentIdBox}, mois={moisApayer}, année={anneeApayer} : {reste}");

                    // Vérifier l'existence d'un contrat actif
                    var contrat = Paiement.GetActiveContract(connexion, currentIdBox, idPerson, moisApayer, anneeApayer);
                    if (contrat == null)
                    {
                        Console.WriteLine($"Aucun contrat actif pour idBox={currentIdBox}, mois={moisApayer}, année={anneeApayer}, dette ignorée");
                        string queryDeleteDette = $"DELETE FROM DETTE WHERE idPerson = {idPerson} AND idBox = {currentIdBox} AND mois = {moisApayer} AND annee = {anneeApayer}";
                        connexion.ExecuteUpdate(queryDeleteDette);
                        continue;
                    }

                    int moisDebut = Convert.ToInt32(contrat[0]);
                    int anneeDebut =  Convert.ToInt32(contrat[1]);
                    int moisFin =  Convert.ToInt32(contrat[2]);
                    int anneeFin = Convert.ToInt32(contrat[3]);

                    if (reste > 0)
                    {
                        // Vérifier si la période dépasse la fin du contrat
                        if (Paiement.CheckFinContrat(connexion, currentIdBox, idPerson, moisApayer, anneeApayer, moisFin, anneeFin))
                        {
                            var nextMoisApayer = Paiement.GetNextContrat(connexion, idPerson, moisFin, anneeFin);
                            if (nextMoisApayer == null || nextMoisApayer[0] == null || nextMoisApayer[1] == null)
                            {
                                break;
                            }
                            moisApayer = Convert.ToInt32(nextMoisApayer[0]);
                            anneeApayer = Convert.ToInt32(nextMoisApayer[1]);
                            continue;
                        }

                        // Effectuer le paiement
                        decimal paiementActuel = Math.Min(montantRestant, reste);
                        Console.WriteLine($"Paiement actuel : {paiementActuel}");
                        string queryPaiement = $"INSERT INTO PAIEMENT (idBox, idPerson, mois, annee, montant, datePaiement) VALUES ({currentIdBox}, {idPerson}, {moisApayer}, {anneeApayer}, {paiementActuel}, '{datePaiement}')";
                        connexion.ExecuteUpdate(queryPaiement);
                        Console.WriteLine($"Paiement de {paiementActuel} inséré pour idBox={currentIdBox}, mois={moisApayer}, année={anneeApayer}");

                        montantRestant -= paiementActuel;
                        Console.WriteLine($"Montant restant après paiement : {montantRestant}");

                        // Mettre à jour la dette
                        decimal nouveauReste = Paiement.GetResteApayer(connexion, currentIdBox, idPerson, moisApayer, anneeApayer);
                        Console.WriteLine($"Nouveau reste après paiement : {nouveauReste}");
                        Person.UpdateDette(connexion, currentIdBox, idPerson, moisApayer, anneeApayer, nouveauReste);
                    }

                    // Passer au mois suivant
                    moisApayer++;
                    if (moisApayer > 12)
                    {
                        moisApayer = 1;
                        anneeApayer++;
                    }

                    // Vérifier si le nouveau mois dépasse la fin du contrat
                    if (Paiement.CheckFinContrat(connexion, currentIdBox, idPerson, moisApayer, anneeApayer, moisFin, anneeFin))
                    {
                        var nextMoisApayer = Paiement.GetNextContrat(connexion, idPerson, moisFin, anneeFin);
                        if (nextMoisApayer == null || nextMoisApayer[0] == null || nextMoisApayer[1] == null)
                        {
                            continue;
                        }
                        moisApayer = Convert.ToInt32(nextMoisApayer[0]);
                        anneeApayer = Convert.ToInt32(nextMoisApayer[1]);
                        Console.WriteLine($"Nouveau contrat trouvé : mois={moisApayer}, année={anneeApayer}");
                    }

                    Console.WriteLine($"Passage au mois suivant pour idBox={currentIdBox} : {moisApayer}/{anneeApayer}");
                    decimal montantDetteSuivante = Paiement.GetResteApayer(connexion, currentIdBox, idPerson, moisApayer, anneeApayer);
                    Console.WriteLine($"Reste à payer pour le nouveau mois {moisApayer}/{anneeApayer} : {montantDetteSuivante}");

                    if (montantDetteSuivante >= 0)
                    {
                        string queryNouvelleDette = $"INSERT INTO DETTE (idBox, idPerson, mois, annee, montant) VALUES ({currentIdBox}, {idPerson}, {moisApayer}, {anneeApayer}, {montantDetteSuivante})";
                        connexion.ExecuteUpdate(queryNouvelleDette);
                        Console.WriteLine($"Nouvelle dette de {montantDetteSuivante} insérée pour idBox={currentIdBox}, mois={moisApayer}, année={anneeApayer}");
                    }
                    else
                    {
                        Console.WriteLine($"Aucune dette à insérer pour idBox={currentIdBox}, mois={moisApayer}, année={anneeApayer}");
                    }
                }

                Console.WriteLine("Paiement réussi");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur : {ex.Message}");
                return false;
            }
        }